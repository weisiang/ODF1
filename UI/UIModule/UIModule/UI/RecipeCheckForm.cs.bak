using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Text.RegularExpressions;
using BaseAp;

namespace UI
{
    public partial class RecipeCheckForm : Form
    {
        public RecipeCheckForm()
        {
            InitializeComponent();
        }

        private void RecipeCheckForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            CommonData.HIRATA.MDGlassDataCheck obj = new CommonData.HIRATA.MDGlassDataCheck();
            obj.PCheckOn = GetNode("Check ON").Checked;
            obj.PCheckRecipeNo = GetNode("Recipe No").Checked;
            obj.PCheckWorkId = GetNode("Work Id").Checked;
            obj.PCheckFoupSeq = GetNode("Foup Seq").Checked;
            obj.PCheckWorkSlot = GetNode("Work Slot").Checked;
            obj.PCheckOFF = GetNode("Check OFF").Checked;

            if ( !(obj.PCheckOn ^ obj.PCheckOFF) )
            {
                CommonStaticData.PopForm("Check condition error , please check" , true , false);
                return;
            }
            if(obj.PCheckOn)
            {
                if( !(obj.PCheckRecipeNo | obj.PCheckWorkId | obj.PCheckWorkSlot | obj.PCheckFoupSeq))
                {
                    CommonStaticData.PopForm("Check one condition at least , please check" , true , false);
                    return;
                }
            }
            string rtn;
            object tmp = null;
            uint ticket;
            string log = "";
            log += "Send : " + typeof(CommonData.HIRATA.MDGlassDataCheck).Name + Environment.NewLine;
            obj.PType = CommonData.HIRATA.MmfEventClientEventType.etRequest;
            CleanAllCheck();
            UiForm.WriteLog(CommonData.HIRATA.LogLevelType.General, "Send MDGlassDataCheck");
            if (!Global.Controller.SendMmfRequestObjectTimeout(typeof(CommonData.HIRATA.MDGlassDataCheck).Name, obj, out ticket, out rtn, out tmp, 3000))
            {
                log += "[Time Out]Wait : " + typeof(CommonData.HIRATA.MDGlassDataCheck).Name;
            }
            UiForm.WriteLog(CommonData.HIRATA.LogLevelType.General, "Hide Send MDGlassDataCheck");
            this.Hide();
        }
        public TreeNode GetNode(string name)
        {
            TreeNode itemNode = null;
            foreach (TreeNode node in treeView1.Nodes)
            {
                if (node.Tag.Equals(name)) return node;
                itemNode = GetNode(name, node);
                if (itemNode != null) break;
            }
            return itemNode;
        }
        public TreeNode GetNode(string name, TreeNode rootNode)
        {
            foreach (TreeNode node in rootNode.Nodes)
            {
                if (node.Tag.Equals(name)) return node;
                TreeNode next = GetNode(name, node);
                if (next != null) return next;
            }
            return null;
        }
        private void SetNodeChecked(bool m_CheckOff , bool m_CheckOn , bool m_CheckRecipe, bool m_CheckId, bool m_CheckSlot, bool m_CheckSeq)
        {
            GetNode("Check ON").Checked = m_CheckOn;
            GetNode("Recipe No").Checked =m_CheckRecipe;
            GetNode("Work Id").Checked = m_CheckId;
            GetNode("Foup Seq").Checked = m_CheckSeq;
            GetNode("Work Slot").Checked = m_CheckSlot;
            GetNode("Check OFF").Checked = m_CheckOff;
        }
        public void SetNodeChecked(int m_Value)
        {
            SetNodeChecked(m_Value == 0, m_Value != 0, 
                (m_Value & (int)CommonData.HIRATA.DataCheckRule.Recipe) ==  (int)CommonData.HIRATA.DataCheckRule.Recipe,
                (m_Value & (int)CommonData.HIRATA.DataCheckRule.id) == (int)CommonData.HIRATA.DataCheckRule.id ,
                (m_Value & (int)CommonData.HIRATA.DataCheckRule.slot) == (int)CommonData.HIRATA.DataCheckRule.slot , 
                (m_Value & (int)CommonData.HIRATA.DataCheckRule.seq) == (int)CommonData.HIRATA.DataCheckRule.seq);
        }
        private void button2_Click(object sender, EventArgs e)
        {
            this.Hide();
        }
        private void CleanAllCheck()
        {
            GetNode("Check ON").Checked = false;
            GetNode("Recipe No").Checked = false;
            GetNode("Work Id").Checked = false;
            GetNode("Foup Seq").Checked = false;
            GetNode("Work Slot").Checked = false;
            GetNode("Check OFF").Checked = false;
        }

    }
}